#This could be rewritten to use not the shapefiles but the text files derived from them using read_census_block_shapes.py

#Should change the search for intersecting boundary segments to be more BFS-y

#Input files: [census block shape-record file] [assignment file generated by do_redistrict] [output file name]
#Format of output file: each line is
#    <census block ID number> <center ID number> <subpopulation assigned to that center> <area of intersection with that cell> ... 

import shapefile
from shapely.geometry import shape,LineString
import build_district_graph
from Voronoi_boundaries import *

def segment2districts(G, segment):
    dart1 = G.segmentmapper.segment2id[segment]
    dart2 = G.rev(dart1)
    return [G.head[d] for d in [dart1, dart2]]

def go(shapefilename, redistrict_assignment_filename, outfilename):
    #Build graph representing districts
    C_3D, A, assign_pairs, box = Parse(redistrict_assignment_filename)
    cells = power_cells(C_3D, box)
    G = build_district_graph.EGraph()
    for cell in cells: G.process_cell(cell)
    G.find_outer()
    
    # Get current assignment
    af = open(redistrict_assignment_filename)
    header = af.readline() #number of centers, number of client points
    k, num_census_blocks = [int(x) for x in header.split()]
    assert k == G.num_vertices() - 1
    #read off the lines specifying center locations
    center_locations = []
    for i in range(k):
        items = af.readline().split()
        center_locations.append((float(items[0]), float(items[1])))
    #now next lines specify assignment
    counter = -1 #keep track of id number of census block being considered (we only count those with nonzero population)
    sf = shapefile.Reader(shapefilename)
    fout = open(outfilename,'w')
    for shape_rec in sf.iterShapeRecords():
        pop = shape_rec.record[7]
        if pop > 0:
                counter = counter + 1
                if counter % 10000 == 0:
                        print(counter)
                        fout.flush()
                line = af.readline() #get corresponding line from assignment file
                items = line.split()
                assignment_data = [int(x) for x in items[2:]]
                districts = [assignment_data[i] for i in range(0, len(assignment_data), 2)]
                subpops = [assignment_data[i] for i in range(1, len(assignment_data), 2)]
                if len(districts) >= 2:
                    fout.write(str(counter)+" ")
                    for district,subpop in zip(districts,subpops):
                        area = census_block.intersection(cells[district]).area
                        fout.write(str(district)+" "+str(subpop)+" "+str(area)+" ")
                    fout.write("\n")
                else:
                   #see if census block intersects the boundary between districts
                   assert len(districts)==1
                   assigned_district = districts[0]
                   candidate_districts = {assigned_district}
                   neighboring_darts = G.vertices[assigned_district]
                   census_block = shape(shape_rec.shape)
                   for segment in [G.segmentmapper.id2segment[d] for d in neighboring_darts]:
                       segment_shape = LineString(segment)
                       if segment_shape.intersects(census_block):
                                i1, i2 = segment2districts(G, segment) # ids of the two bordering districts
                                #one of these is assigned_district so is already in set
                                candidate_districts.add(i1)
                                candidate_districts.add(i2)
                   if len(candidate_districts) > 1:
                       fout.write(str(counter)+" ")
                       for district in candidate_districts:
                        area = census_block.intersection(cells[district]).area
                        fout.write(str(district)+" "+ str(subpops[0] if district == districts[0] else 0)+" "+str(area)+" ")
                       fout.write("\n")
    fout.close()
                                    
if __name__ == '__main__':
    if len(sys.argv) < 4:
        print("Use: ", sys.argv[0], "[census block shape-record file] [assignment file generated by do_redistrict] [output file name]")
        exit(-1)
    go(sys.argv[1], sys.argv[2], sys.argv[3])
#/Users/klein/programming/district_data/California_census_block_data/tabblock2010_06_pophu
#/Users/klein/drive/District_data/California_assignment.txt
#/Users/klein/programming/district_data/boundary_districts.txt"
